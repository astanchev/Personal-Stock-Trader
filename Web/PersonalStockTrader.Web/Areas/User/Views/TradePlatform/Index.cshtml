@using System.Globalization
@model PersonalStockTrader.Web.ViewModels.User.TradePlatform.DisplayViewModel
@{
    ViewData["Title"] = "Trading platform";
}

<div class="content-wrapper">
    <div class="row">
        <div class="col-lg-6 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">IBM 1 min. chart</h4>
                    <canvas id="ibmChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-6 grid-margin stretch-card">
            <div class="card">

                <div class="card-body">
                    <h4 class="card-title">Trade</h4>
                    <div class="row">

                        <div class="col-md-6 alert alert-primary text-center">
                            <strong>Price IBM: </strong>
                            <span id="price" name="price">@Model.LastPrice</span>
                        </div>

                        <div class="col-md-6 alert alert-warning text-center">
                            <strong>Time: </strong>
                            <span id="datetime" name="datetime" contenteditable="true">@Model.LastDateTime</span>
                        </div>

                    </div>
                    <div class="card">
                        <div class="card-body">
                            <form id="tradeForm" asp-area="User" asp-controller="TradePlatform" asp-action="TradeShares" method="post" class="form-sample">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group row">
                                            <label class="col-sm-3 col-form-label font-weight-bold text-right text-uppercase">Shares</label>
                                            <div class="col-sm-9">
                                                <input id="quantity" name="quantity" type="number" min="0" max="1000" step="1" value="0" onchange="calculateValue()" class="text-center form-control border border-dark" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group row">
                                            <label id="total" class="col-sm-3 col-form-label text-uppercase font-weight-bold text-right">Total</label>
                                            <div class="col-sm-9">
                                                <input id="totalPrice" type="number" class="text-center form-control border border-dark" readonly />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group row">
                                            <label class="col-md-3 col-form-label font-weight-bold text-right">Current Balance</label>
                                            <div class="col-md-9">
                                                <input id="accountId" name="accountId" type="hidden" value="@Model.AccountId" />
                                                <input id="positionId" name="positionId" type="hidden" value="@Model.Position.PositionId" />
                                                <input id="balance" class="text-center form-control border border-dark" value="@Model.Balance.ToString("F2")" readonly />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr />
                                <div class="text-center">
                                    <button id="btnBuy" type="submit" asp-action="TradeShares"  asp-route-isBuy="true" class="btn btn-success btn-lg">Buy</button>
                                    <button id="btnSell" type="submit" asp-action="TradeShares" asp-route-isBuy="false" class="btn btn-danger btn-lg">Sell</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="col-lg-12 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Opened Positions</h4>
            <div class="table-responsive">
                <table id="positions" class="table table-hover table-striped">
                    <thead class="thead-light">
                        <tr>
                            <th scope="col" class="text-center">Stock</th>
                            <th scope="col" class="text-center">Quantity</th>
                            <th scope="col" class="text-center">Direction (Buy/Sell)</th>
                            <th scope="col" class="text-center">Buy/Sell price</th>
                            <th scope="col" class="text-center">Current price</th>
                            <th scope="col" class="text-center">Profit/Loss</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Position.PositionId > 0)
                        {
                            <tr id="position">
                                <td id="ticker" class="text-center font-weight-bold">@Model.Ticker</td>
                                <td id="positionQuantity" class="text-center">@Model.Position.Quantity</td>
                                <td id="positionDirection" class="text-center">@Model.Position.Direction</td>
                                <td id="positionOpenPrice" class="text-center">@Model.Position.OpenPrice.ToString("f2")</td>
                                <td id="positionCurrentPrice" class="text-center">@Model.LastPrice</td>
                                <td id="positionProfit" class="text-center font-weight-bold">@Model.CurrentProfit.ToString("f2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        var isBuy = document.getElementById('positionDirection');

        if (isBuy.textContent === 'True') {
            isBuy.textContent = '';
            isBuy.innerHTML = '<label class="badge badge-success">Bought</label>';
        } else {
            isBuy.textContent = '';
            isBuy.innerHTML = '<label class="badge badge-danger">Sold</label>';
        }
    </script>
    
    <script>
        var positionProfit = document.getElementById('positionProfit');
        if (Number(positionProfit.textContent) < 0) {
            positionProfit.classList.add('text-danger');
            positionProfit.innerHTML += '<i class="mdi mdi-arrow-down">';
        } else if (Number(positionProfit.textContent) < 0) {
            positionProfit.classList.add('text-success');
            positionProfit.innerHTML += '<i class="mdi mdi-arrow-up">';
        }
    </script>

    <script>
        function updateTable() {
            var isBuy = document.getElementById('positionDirection');
            var positionProfit = document.getElementById('positionProfit');
            var openPrice = document.getElementById('positionOpenPrice').textContent;
            var currentPrice = document.getElementById('positionCurrentPrice').textContent;
            var quantity = document.getElementById('positionQuantity').textContent;
            var balance = document.getElementById('balance').textContent;
            var profit = (openPrice - currentPrice) * quantity;

            if (isBuy) {
                positionProfit.textContent = (- 1.0 * profit).toFixed(2);
                $('#positionDirection').innerHTML = '<label class="badge badge-success">Bought</label>';
            } else {
                positionProfit.textContent = profit.toFixed(2);
                $('#positionDirection').innerHTML = '<label class="badge badge-danger">Sold</label>';
            }

            if (Number(positionProfit.textContent) > 0) {
                positionProfit.classList.add('text-danger');
            } else if (Number(positionProfit.textContent) < 0) {
                positionProfit.classList.add('text-success');
            }

            $('#balance').textContent = (balance - Number($('#positionProfit').textContent)).toFixed(2);
        }
    </script>



    <script>
        document.addEventListener('DOMContentLoaded',
            function(e) {

                e.preventDefault();

                const connection = new signalR.HubConnectionBuilder()
                    .withUrl("/stockshub")
                    .configureLogging(signalR.LogLevel.Information)
                    .build();

                const time = document.getElementById("datetime").textContent;

                connection.on("ReceiveStockPriceUpdate",
                    (newPrice, newTime) => {
                        document.getElementById("price").textContent = newPrice;
                        document.getElementById("datetime").textContent = newTime;
                    });

                connection.start()
                    .then(() => {
                        connection.invoke("GetUpdateForStockPrice", time);
                    })
                    .catch(err => console.error(err.toString()));
            });
    </script>

    <script>
        function calculateValue() {
            var quantity = document.getElementById("quantity").value;
            var price = document.getElementById("price").textContent;
            document.getElementById("totalPrice").value = (Number(quantity) * Number(price)).toFixed(2);
        };
    </script>

    <script>
        var balance = document.getElementById('balance');
        var profit = document.getElementById('positionProfit');

        balance.addEventListener('change', setTwoNumberDecimal);
        profit.addEventListener('change', setTwoNumberDecimal);

        function setTwoNumberDecimal(event) {
            this.value = parseFloat(this.value).toFixed(2);
        }
    </script>

    <script>
        $(document).ready(function() {
            $('#positions').DataTable({
                "pagingType": "simple_numbers"
            });
            $('.dataTables_length').addClass('bs-select');
        });
    </script>

    <script>
        var price = document.getElementById("price");
        var dateTime = document.getElementById("datetime");
        var values = @Html.Raw(Json.Serialize(Model.PricesAndTimes.Select(x => x.Price).ToArray()));
        var labels = @Html.Raw(Json.Serialize(Model.PricesAndTimes.Select(x => x.DateTime).ToArray()));

        var chart = new Chart(document.getElementById("ibmChart"),
            {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            borderColor: "#096902",
                            backgroundColor: "#03fcd3",
                            data: values,
                            fill: true
                        }
                    ]
                },
                options: {
                    legend: { display: false },
                    title: {
                        display: true,
                        text: 'IBM stock price last 90 minutes'
                    }
                }
            });

        const targetNode = document.getElementById('datetime');

// Options for the observer (which mutations to observe)
        const config = { attributes: true, characterData: true, childList: true, subtree: true };

// Callback function to execute when mutations are observed
        const callback = function(mutationsList, observer) {
            // Use traditional 'for loops' for IE 11
            for (let mutation of mutationsList) {
                labels.push(dateTime.textContent);
                labels.shift();
                values.push(price.textContent);
                values.shift();

                $('#positionCurrentPrice').textContent = price.textContent;

                if (@Model.Position.PositionId !== 0) {
                    updateTable();
                }

                chart.update();
            }
        };

// Create an observer instance linked to the callback function
        const observer = new MutationObserver(callback);

// Start observing the target node for configured mutations
        observer.observe(targetNode, config);

    </script>
}
