@using System.Globalization
@model PersonalStockTrader.Web.ViewModels.User.TradePlatform.DisplayViewModel
@{
    ViewData["Title"] = "Trading platform";
}

<div class="content-wrapper">
    <div class="row">
        <div class="col-lg-6 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">IBM 1 min. chart</h4>
                    <canvas id="ibmChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-6 grid-margin stretch-card">
            <div class="card">

                <div class="card-body">
                    <h4 class="card-title">Trade</h4>
                    <div class="row">
                        
                        <div class="col-md-6 alert alert-primary text-center">
                            <strong>Price IBM: </strong>
                            <span id="price" name="price">@Model.LastPrice</span>
                        </div>

                            <div class="col-md-6 alert alert-warning text-center">
                                <strong>Time: </strong>
                                <span id="datetime" name="datetime">@Model.LastDateTime</span>
                            </div>
                        
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <form class="form-sample">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group row">
                                            <label class="col-sm-3 col-form-label font-weight-bold text-right">Quantity shares</label>
                                            <div class="col-sm-9">
                                                <input id="quantity" type="number" min="0" max="1000" step="1" value="0" onchange="calculateValue()" class="text-center form-control border border-dark" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group row">
                                            <label class="col-sm-3 col-form-label font-weight-bold text-right">Total amount</label>
                                            <div class="col-sm-9">
                                                <input id="totalPrice" type="number" class="text-center form-control border border-dark" readonly />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <hr/>
                                <div class="text-center">
                                    <button type="button" class="btn btn-success btn-lg">Buy</button>
                                    <button type="button" class="btn btn-danger btn-lg">Sell</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="col-lg-12 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Current Positions</h4>
            <div class="table-responsive">
                <table id="positions" class="table table-hover table-striped">
                    <thead class="thead-light">
                        <tr>
                            <th scope="col" class="text-center">Stock</th>
                            <th scope="col" class="text-center">Quantity</th>
                            <th scope="col" class="text-center">Direction (Buy/Sell)</th>
                            <th scope="col" class="text-center">Buy/Sell price</th>
                            <th scope="col" class="text-center">Current price</th>
                            <th scope="col" class="text-center">Profit/Loss</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        document.addEventListener('DOMContentLoaded', function (e) {

            e.preventDefault();
            
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/stockshub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connection.on("ReceiveStockPriceUpdate",
                (newPrice, newTime) => {

                    document.getElementById("price").textContent = newPrice;
                    document.getElementById("datetime").textContent = newTime;
                });

            const time = document.getElementById("datetime").textContent;

            connection.start()
                .then(() => {
                    connection.invoke("GetUpdateForStockPrice", time);
                })
                .catch(err => console.error(err.toString()));
        });
    </script>

    <script>
        function calculateValue() {
            var quantity = document.getElementById("quantity").value;
            var price = document.getElementById("price").textContent;
            document.getElementById("totalPrice").value = (Number(quantity) * Number(price)).toFixed(2);
        };
    </script>

    <script>
        $(document).ready(function () {
            $('#positions').DataTable({
                "pagingType": "simple_numbers"
            });
            $('.dataTables_length').addClass('bs-select');
        });
    </script>
    
    <script>
        new Chart(document.getElementById("ibmChart"), {
            type: 'line',
            data: {
                labels: [
                    @Html.Raw(string.Join(", ",Model.PricesAndTimes.Select(x => "'" + x.DateTime + "'").ToArray()))
                ],
                datasets: [{
                    borderColor: "#096902",
                    backgroundColor: "#03fcd3",
                    data: [
                        @string.Join(", ", Model.PricesAndTimes.Select(x => x.Price).ToArray())
                    ],
                    fill: true
                }]
            },
            options: {
                legend: { display: false },
                title: {
                    display: true,
                    text: 'IBM stock price last 300 minutes'
                }
            }
        });
    </script>
}
